= rubygems-compile

A set of rubygems commands for <tt>macgem</tt> that interface with the
MacRuby compiler.

All you need to do is:

     macgem install rubygems-compile

And then you're off to the races!

== Commands

[+compile+] Can be used to compile, or re-compile, any gems that are  already installed.
Options:
  sudo macgem compile --all  # Compile all installed gems
  sudo macgem compile rspec --no-ignore-dependencies  # Also compile dependencies

[+uncompile+] Can be used to remove the compiled <tt>.rbo</tt> files if a gem does not work well when compiled.
Options:
  sudo macgem uncompile --all  # Uncompile all installed gems
  sudo macgem uncompile rspec --no-ignore-dependencies  # Also uncompile dependencies

[+autocompile+] Can be used to enable a post-install hook that will automatically compile gems when you install them. Call it once to turn on, call it a second time to disable it.

== Caveats

* Large gems will take a long time to compile, but these are the gems
  that will benefit the most from being compiled so please be patient
* This has only been tested on a few gems, but should not break
  existing gems since we leave the original files around
* As of MacRuby 0.11, you cannot get usable backtrace data for
  compiled ruby files
* .rbo files take up more disk space than their .rb equivalents

== Known Reasons A Compiled Gem Will Not Work

* Using non-standard file suffixes (e.g. <tt>mime-types</tt> has a <tt>.rb.data</tt> file)
  * This might be addressable in a later release
* Gems that explicitly require a file with the file suffix (e.g. <tt>require 'nokogiri.rb'</tt>)
  * This might be addressable in a future release

== TODO

* Code parsing to WARN about gems that will not work when compiled
* Parallel compilation to speed up compilation of large gems
  * This might require changes in the MacRuby compiler

== Copyright

Copyright (c) 2011 Mark Rada. See LICENSE.txt for further details.

